package com.satoripop.rfp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserConfigAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserConfigAllPropertiesEquals(UserConfig expected, UserConfig actual) {
        assertUserConfigAutoGeneratedPropertiesEquals(expected, actual);
        assertUserConfigAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserConfigAllUpdatablePropertiesEquals(UserConfig expected, UserConfig actual) {
        assertUserConfigUpdatableFieldsEquals(expected, actual);
        assertUserConfigUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserConfigAutoGeneratedPropertiesEquals(UserConfig expected, UserConfig actual) {
        assertThat(expected)
            .as("Verify UserConfig auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserConfigUpdatableFieldsEquals(UserConfig expected, UserConfig actual) {
        assertThat(expected)
            .as("Verify UserConfig relevant properties")
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFirstname()).as("check firstname").isEqualTo(actual.getFirstname()))
            .satisfies(e -> assertThat(e.getLastname()).as("check lastname").isEqualTo(actual.getLastname()))
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserConfigUpdatableRelationshipsEquals(UserConfig expected, UserConfig actual) {
        assertThat(expected)
            .as("Verify UserConfig relationships")
            .satisfies(e -> assertThat(e.getRole()).as("check role").isEqualTo(actual.getRole()))
            .satisfies(e -> assertThat(e.getTechnologies()).as("check technologys").isEqualTo(actual.getTechnologies()));
    }
}
